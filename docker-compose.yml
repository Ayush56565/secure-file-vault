version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: filevault
      POSTGRES_USER: filevault
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-filevault123}
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - filevault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U filevault"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${BACKEND_PORT:-8081}:8081"
    environment:
      DATABASE_URL: postgres://filevault:${POSTGRES_PASSWORD:-filevault123}@postgres:5432/filevault?sslmode=disable
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
      UPLOAD_DIR: /app/uploads
      RATE_LIMIT_RPS: ${RATE_LIMIT_RPS:-10}
      DEFAULT_QUOTA_MB: ${DEFAULT_QUOTA_MB:-10}
      PORT: 8081
      GIN_MODE: ${GIN_MODE:-release}
    volumes:
      - uploads_data:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - filevault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8081/api/files/public"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3031}:3031"
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8081}
    depends_on:
      - backend
    networks:
      - filevault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3031"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - uploads_data:/var/www/uploads:ro
    depends_on:
      - frontend
      - backend
    networks:
      - filevault-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local

networks:
  filevault-network:
    driver: bridge
